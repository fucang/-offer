#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
using namespace std;

/*一个链表中包含环，请找出该链表的环的入口结点。*/

struct ListNode 
{
	int val;
	struct ListNode *next;
	ListNode(int x) : val(x), next(NULL) 
	{}
};

int LengthList(ListNode* pHead, ListNode* pTail = NULL)
{
	if (pHead == NULL)
		return 0;
	int count = 0;
	ListNode* cur = pHead;
	while ((cur->next != NULL) && (cur->next != pTail))
	{
		++count;
		cur = cur->next;
	}
	return ++count;
}

ListNode* EntryNodeOfLoop(ListNode* pHead)
{
	if (pHead == NULL)
	{
		return NULL;
	}
	//找相遇节点
	ListNode* slow = pHead;
	ListNode* fast = pHead;
	//因为是环，所以next域不可能为空
	do{
		fast = fast->next->next;
		slow = slow->next;
	} while (slow != fast);
	int lenHead = LengthList(pHead, slow);
	int lenMeet = LengthList(slow, slow);
	int subLen = lenHead - lenMeet;
	ListNode* cur = pHead;
	ListNode* meet = slow;
	if (subLen > 0)
	{
		while (subLen--)
		{
			cur = cur->next;
		}
	}
	else
	{
		while (subLen++)
		{
			meet = meet->next;
		}
	}
	while (cur != meet)
	{
		cur = cur->next;
		meet = meet->next;
	}
	return meet;
}
void test()
{
	ListNode* node1 = new ListNode(1);
	ListNode* node2 = new ListNode(2);
	ListNode* node3 = new ListNode(3);
	ListNode* node4 = new ListNode(4);
	ListNode* node5 = new ListNode(5);
	ListNode* node6 = new ListNode(6);
	ListNode* node7 = new ListNode(7);
	ListNode* node8 = new ListNode(8);
	ListNode* node9 = new ListNode(9);
	node1->next = node2;
	node2->next = node3;
	node3->next = node4;
	node4->next = node5;
	node5->next = node6;
	node6->next = node7;
	node7->next = node8;
	node8->next = node9;
	node9->next = node4;
	cout << EntryNodeOfLoop(node1)->val << endl;
}
int main()
{
	test();
	system("pause");
	return 0;
}
