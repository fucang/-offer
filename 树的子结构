/*输入两颗二叉树A，B，判断B是不是A的子结构。*/
struct TreeNode 
{
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL)
	{}
};
/*
*由根节点开始，逐个判断节点值是否相等，若不是子树，则递归调用左、右子树
*/
bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
{
	bool result = false;
	if (pRoot1 != NULL && pRoot2 != NULL)
	{
		if (pRoot1->val == pRoot2->val)
		{
			result = HasSubChildtree(pRoot1, pRoot2);
		}
		if (!result)
		{
			result = HasSubtree(pRoot1->left, pRoot2);
		}

		if (!result)
		{
			result = HasSubtree(pRoot1->right, pRoot2);
		}
	}

	return result;
}
bool HasSubChildtree(TreeNode* pRoot1, TreeNode* pRoot2)
{
	//pRoot2 == NULL,说明子树已到叶子结点，返回true
	if (pRoot2 == NULL)
	{
		return true;
	}
	if (pRoot1 == NULL)
	{
		return false;
	}
	if (pRoot1->val == pRoot2->val)
	{
		//递归调用左右子树
		return HasSubChildtree(pRoot1->left, pRoot2->left) &&
			HasSubChildtree(pRoot1->right, pRoot2->right);
	}
	return false;
}
