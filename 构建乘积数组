/*
*给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],]
*其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。
*不能使用除法。
*/
/*
*将B[i]分解，B[i] = C[i]*D[i],
*其中C[i]=A[0]*A[1]*...*A[i-1]=C[i-1]*A[i-1],
*D[i]=A[i+1]*A[i+2]*...*A[n-1]=D[i+1]*A[i+1],倒着算
*并初始化C[0] = 1,D[n-1] = 1
*/
vector<int> multiply(const vector<int>& A) 
{
	size_t size = A.size();
	vector<int> B(size);
	if (size <= 1)
	{
		return B;
	}
	vector<int> C(size);
	vector<int> D(size);
	C[0] = 1;
	D[size - 1] = 1;
	for (int i = 1; i < size; ++i)
	{
		C[i] = C[i - 1] * A[i - 1];
		D[size - 1 - i] = D[size - i] * A[size - i];
	}
	for (int i = 0; i < size; ++i)
	{
		B[i] = C[i] * D[i];
	}
	return B;
}
