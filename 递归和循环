/*
*斐波那契数列：f(n) =      n,		 n<=1
*					  f(n-1)+f(n-2), n>1
*大家都知道斐波那契数列，现在要求输入一个
*整数n，请你输出斐波那契数列的第n项。
*/
int Fibonacci(int n) 
{
	if (n <= 1)
	{
		return n;
	}
	int count1 = 0;
	int count2 = 1;
	int count3 = 0;
	for (int i = 1; i < n; ++i)
	{
		count3 = count2 + count1;
		count1 = count2;
		count2 = count3;
	}
	return count3;
}

/*
*题目描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级。
*求该青蛙跳上一个n级的台阶总共有多少种跳法。
*题目分析：因为可以跳1级台阶或2级台阶，所以
*当第一次跳1级时那么就剩n-1级，当第一次跳2级
*时那么就剩n-2级，以此类推就可知道
*f(n) =      1,		 n<=1  （注意和斐波那契数列的不同）
*		f(n-1)+f(n-2), n>1
*等同于斐波那契额数列
*/
int jumpFloor(int number) 
{
	if (number <= 1)
	{
		return 1;
	}
	int count1 = 1;
	int count2 = 1;
	int count3 = 0;
	for (int i = 1; i < number; ++i)
	{
		count3 = count2 + count1;
		count1 = count2;
		count2 = count3;
	}
	return count3;
}

/*
*题目描述：一只青蛙一次可以跳上1级台阶，也可以跳上2级……
*它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
*题目分析：
* f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(1) + f(0)
* f(n-1) = f(n-2) + f(n-3) + ... + f(1) + f(0)  
*将f(n-1)带入f(n)可得：
* f(n)  = 2 * f(n-1)
*所以：f(n-1)  = 2 * f(n-2)
*所以：f(n) = 2^(n-2) * f(2) = 2^(n-2) * (f(1) + f(0)) 
							 = 2^(n-2) * 2 = 2^(n-1)
*/

int jumpFloorII(int number) 
{
	if (number == 0)
	{
		return 0;
	}
	return pow(2, number - 1);
}

/*
*题目描述：我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。
*请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
*题目分析：
* 可以分为两种情况，横着放和竖着放，如果横着放那么就剩2*(n-2)的矩形去覆盖；
*如果竖着放那么就剩2*(n-1)的矩形去覆盖，且当n=1时只有一种放法，当n=2时有两种
*放法，所以还是和斐波那契数列类似不过n==0时，f(n) = 1
；*即：f(n) =      1,		 n<=1  （注意和斐波那契数列的不同）
*		   f(n-1)+f(n-2), n>1
*/
int rectCover(int number) 
{
	if (number <= 1)
	{
		return number;
	}
	int count1 = 1;
	int count2 = 1;
	int count3 = 0;
	for (int i = 1; i < number; ++i)
	{
		count3 = count2 + count1;
		count1 = count2;
		count2 = count3;
	}
	return count3;
}
